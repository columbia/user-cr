/*
 * Generated by extract-headers.sh.
 */
#ifndef __ASM_S390_CHECKPOINT_HDR_H_
#define __ASM_S390_CHECKPOINT_HDR_H_

/*
 *  Checkpoint/restart - architecture specific headers s/390
 *
 *  Copyright IBM Corp. 2009
 *
 *  This file is subject to the terms and conditions of the GNU General Public
 *  License.  See the file COPYING in the main directory of the Linux
 *  distribution for more details.
 */

#include <linux/types.h>
#include <asm/ptrace.h>

/*
 * Notes
 * NUM_GPRS defined in <asm/ptrace.h> to be 16
 * NUM_FPRS defined in <asm/ptrace.h> to be 16
 * NUM_APRS defined in <asm/ptrace.h> to be 16
 * NUM_CR_WORDS defined in <asm/ptrace.h> to be 3
 *              but is not yet in glibc headers.
 */

#define NUM_CR_WORDS 3

struct ckpt_hdr_cpu {
	struct ckpt_hdr h;
	__u64 args[1];
	__u64 gprs[NUM_GPRS];
	__u64 orig_gpr2;
	__u16 svcnr;
	__u16 ilc;
	__u32 acrs[NUM_ACRS];
	__u64 ieee_instruction_pointer;

	/* psw_t */
	__u64 psw_t_mask;
	__u64 psw_t_addr;

	/* s390_fp_regs_t */
	__u32 fpc;
	union {
		float f;
		double d;
		__u64 ui;
		struct {
			__u32 fp_hi;
			__u32 fp_lo;
		} fp;
	} fprs[NUM_FPRS];

	/* per_struct */
	__u64 per_control_regs[NUM_CR_WORDS];
	__u64 starting_addr;
	__u64 ending_addr;
	__u64 address;
	__u16 perc_atmid;
	__u8 access_id;
	__u8 single_step;
	__u8 instruction_fetch;
};

struct ckpt_hdr_thread {
	struct ckpt_hdr h;
	__u64 thread_info_flags;
};

struct ckpt_hdr_mm_context {
	struct ckpt_hdr h;
	unsigned long vdso_base;
	int noexec;
	int has_pgste;
	int alloc_pgste;
	unsigned long asce_bits;
	unsigned long asce_limit;
};

#define CKPT_ARCH_NSIG 64

/* arch dependent constants */

struct ckpt_hdr_header_arch {
	struct ckpt_hdr h;
};



#endif /* __ASM_S390_CHECKPOINT_HDR_H_ */
